/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package repository_2;

import javafx.util.Pair;
import repository_2.domain.Book;
import repository_2.domain.Client;
import repository_2.domain.Transaction;
import repository_2.domain.validators.BookValidator;
import repository_2.domain.validators.ClientValidator;
import repository_2.domain.validators.TransactionValidator;
import repository_2.domain.validators.Validator;
import repository_2.repository.*;
import repository_2.repository.sorting.BookDBRepository;
import repository_2.repository.sorting.ClientDBRepository;
import repository_2.repository.sorting.SortingRepository;
import repository_2.repository.sorting.TransactionDBRepository;
import repository_2.repository.xml.BookXMLRepository;
import repository_2.repository.xml.ClientXMLRepository;
import repository_2.repository.xml.TransactionXMLRepository;
import repository_2.service.BookService;
import repository_2.service.ClientService;
import repository_2.service.TransactionService;
import repository_2.ui.Console;

import java.io.IOException;

/**
 * TO DO FOR LAB_5 - ALL DONE
 *
 * */
public class App {
    private static final String URL = "jdbc:postgresql://localhost:5432/book-store";
    private static final String USER = "postgres";
    private static final String PASSWORD = "postgres";

    public static void main(String[] args) throws IOException {
        try {
            //create validators for all three classes
            Validator<Book> bookValidator = new BookValidator();
            Validator<Client> clientValidator = new ClientValidator();
            Validator<Transaction> transactionValidator = new TransactionValidator();

            //create repositories for all three classes
            //IN MEMORY REPOSITORIES
            //Repository<Long, Book> bookRepository = new InMemoryRepository<>();
            //Repository<Long, Client> clientRepository = new InMemoryRepository<>();
            //Repository<Pair<Long, Long>, Transaction> transactionRepository = new InMemoryRepository<>();

            //FILE REPOSITORIES
            //Repository<Long, Book> bookRepository = new BookFileRepository("./data/books");
            //Repository<Long, Client> clientRepository = new ClientFileRepository("./data/clients");
            //Repository<Pair<Long, Long>, Transaction> transactionRepository = new TransactionFileRepository("./data/transactions");

            //XML REPOSITORIES
            //Repository<Long, Book> bookRepository = new BookXMLRepository("./data/books.xml");
            //Repository<Long, Client> clientRepository = new ClientXMLRepository("./data/clients.xml");
            //Repository<Pair<Long, Long>, Transaction> transactionRepository = new TransactionXMLRepository("./data/transactions.xml");

            //DB REPOSITORIES
            SortingRepository<Long, Book> bookRepository = new BookDBRepository(URL, USER, PASSWORD);
            SortingRepository<Long, Client> clientRepository = new ClientDBRepository(URL, USER, PASSWORD);
            SortingRepository<Pair<Long, Long>, Transaction> transactionRepository = new TransactionDBRepository(URL, USER, PASSWORD);


            //create services for all three classes
            BookService bookService = new BookService(bookRepository, bookValidator);
            ClientService clientService = new ClientService(clientRepository, clientValidator);
            TransactionService transactionService = new TransactionService(transactionRepository, transactionValidator, bookService, clientService);

            //create and run console
            Console console = new Console(bookService, clientService, transactionService);
            console.runConsole();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
}
